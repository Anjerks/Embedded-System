// ================================
// File: src/App.jsx
// ================================
import React, { useState, useEffect } from 'react';
import { Line } from 'react-chartjs-2';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';

const App = () => {
  const [voltageData, setVoltageData] = useState([]);
  const [filteredData, setFilteredData] = useState([]);
  const [frequencyData, setFrequencyData] = useState([]);
  const [stepCount, setStepCount] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      const v = Math.abs(Math.sin(Date.now() / 1000) + 0.4 * Math.random());
      setVoltageData(prev => {
        const newData = [...prev, v];
        return newData.length > 50 ? newData.slice(-50) : newData;
      });
      if (v > 0.9) setStepCount(c => c + 1);
    }, 200);
    return () => clearInterval(interval);
  }, []);

  const applyFFT = async () => {
    try {
      const res = await fetch('/api/fft', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ data: voltageData })
      });
      const data = await res.json();
      setFrequencyData(data);
    } catch (error) {
      console.error(error);
    }
  };

  const filterSignal = async () => {
    try {
      const res = await fetch('/api/filter', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ data: voltageData })
      });
      const data = await res.json();
      setFilteredData(data);
    } catch (error) {
      console.error(error);
    }
  };

  const voltageChart = {
    labels: voltageData.map((_, i) => i),
    datasets: [{ label: 'Voltage', data: voltageData, borderColor: 'blue' }]
  };

  const filteredChart = {
    labels: filteredData.map((_, i) => i),
    datasets: [{ label: 'Filtered Voltage', data: filteredData, borderColor: 'orange' }]
  };

  const frequencyChart = {
    labels: frequencyData.map((_, i) => i),
    datasets: [{ label: 'Frequency Spectrum', data: frequencyData, borderColor: 'green' }]
  };

  return (
    <main className="p-6 grid gap-6">
      <Card>
        <CardContent>
          <h2 className="text-xl font-bold">Step Count: {stepCount}</h2>
          <Line data={voltageChart} />
          <Button onClick={applyFFT} className="mt-2">Run FFT</Button>
          <Line data={frequencyChart} />
          <Button onClick={filterSignal} className="mt-2">Filter Signal</Button>
          <Line data={filteredChart} />
        </CardContent>
      </Card>
    </main>
  );
};

export default App;

// ================================
// File: server/fft.js
// ================================
const express = require('express');
const fft = require('fft-js').fft;
const fftUtil = require('fft-js').util;

const router = express.Router();

router.post('/fft', (req, res) => {
  try {
    const { data } = req.body;
    if (!Array.isArray(data)) return res.status(400).json({ error: 'Invalid data format' });
    const phasors = fft(data);
    const mags = fftUtil.fftMag(phasors);
    res.json(mags.slice(0, Math.floor(mags.length / 2)));
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;

// ================================
// File: server/filter.js
// ================================
const express = require('express');
const butterworth = require('butterworth-filter');

const router = express.Router();

router.post('/filter', (req, res) => {
  try {
    const { data } = req.body;
    if (!Array.isArray(data)) return res.status(400).json({ error: 'Invalid data format' });
    const filtered = butterworth.lowpass(data, 2, 0.1);
    res.json(filtered);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;

// ================================
// File: notebooks/fourier_analysis.ipynb
// ================================
/* Markdown Cell:
## Fourier Analysis and Signal Filtering
*/

# Code Cell
import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fft, fftfreq
from scipy.signal import butter, filtfilt

Fs = 50
T = 1 / Fs
x = np.linspace(0.0, 1.0, Fs, endpoint=False)
y = np.sin(2.0*np.pi*5.0*x) + 0.5 * np.random.randn(Fs)

b, a = butter(2, 0.1)
y_filtered = filtfilt(b, a, y)

yf = fft(y)
x_freq = fftfreq(Fs, T)[:Fs//2]

plt.figure()
plt.subplot(2,1,1)
plt.plot(x, y, label="Raw")
plt.plot(x, y_filtered, label="Filtered")
plt.legend()

plt.subplot(2,1,2)
plt.plot(x_freq, 2.0/Fs * np.abs(yf[:Fs//2]))
plt.title("FFT Spectrum")
plt.show()

// ================================
// File: notebooks/laplace_transform.ipynb
// ================================
# Code Cell
from sympy import symbols, Heaviside, LaplaceTransform

t, s = symbols('t s')
H = Heaviside(t)
lt = LaplaceTransform(H, t, s, noconds=True)
lt

# Markdown Cell:
## Laplace Transform of Unit Step Function
Used for modeling control system response in actuator simulations.
