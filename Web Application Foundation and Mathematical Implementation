<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Kinetic Matt Step Counter</title>
  <link rel="stylesheet" href="styles.css" />
</head>
<body>
  <div id="root"></div>
  <script src="bundle.js"></script>
</body>
</html>

body {
  font-family: Arial, sans-serif;
  padding: 20px;
  max-width: 700px;
  margin: auto;
  background: #f0f2f5;
}
h2 {
  margin-bottom: 10px;
}
canvas {
  width: 100% !important;
  height: 200px !important;
}
button {
  margin: 10px 0;
  padding: 10px 15px;
  font-size: 16px;
  cursor: pointer;
}
.card {
  background: white;
  border-radius: 8px;
  padding: 20px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  margin-bottom: 20px;
}

import React, { useState, useEffect } from 'react';
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  LineElement,
  CategoryScale,
  LinearScale,
  PointElement,
  Tooltip,
  Legend,
} from 'chart.js';

ChartJS.register(LineElement, CategoryScale, LinearScale, PointElement, Tooltip, Legend);

const App = () => {
  const [voltageData, setVoltageData] = useState([]);
  const [filteredData, setFilteredData] = useState([]);
  const [frequencyData, setFrequencyData] = useState([]);
  const [stepCount, setStepCount] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      const timestamp = Date.now();
      const voltage = Math.abs(Math.sin(timestamp / 1000) + 0.4 * Math.random());

      setVoltageData((prev) => {
        const newData = [...prev, voltage];
        return newData.length > 50 ? newData.slice(-50) : newData;
      });

      if (voltage > 0.9) setStepCount((prev) => prev + 1);
    }, 200);

    return () => clearInterval(interval);
  }, []);

  const applyFFT = async () => {
    try {
      const response = await fetch('/api/fft', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ data: voltageData }),
      });
      if (!response.ok) throw new Error('FFT API error');
      const result = await response.json();
      setFrequencyData(result);
    } catch (error) {
      console.error('FFT error:', error);
      alert('FFT processing failed.');
    }
  };

  const filterSignal = async () => {
    try {
      const response = await fetch('/api/filter', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ data: voltageData }),
      });
      if (!response.ok) throw new Error('Filter API error');
      const result = await response.json();
      setFilteredData(result);
    } catch (error) {
      console.error('Filter error:', error);
      alert('Signal filtering failed.');
    }
  };

  const chartOptions = {
    responsive: true,
    plugins: {
      legend: { display: true },
      tooltip: { mode: 'index', intersect: false },
    },
    elements: {
      point: { radius: 0 },
    },
    scales: {
      x: { display: true },
      y: { display: true },
    },
  };

  const generateChartData = (label, data, color) => ({
    labels: data.map((_, i) => i),
    datasets: [{ label, data, borderColor: color, borderWidth: 2 }],
  });

  return (
    <main className="card">
      <h2>Step Count: {stepCount}</h2>

      <Line data={generateChartData('Voltage', voltageData, 'blue')} options={chartOptions} />
      <button onClick={applyFFT}>Run FFT</button>

      <Line
        data={generateChartData('Frequency Spectrum', frequencyData, 'green')}
        options={chartOptions}
      />
      <button onClick={filterSignal}>Filter Signal</button>

      <Line data={generateChartData('Filtered Voltage', filteredData, 'orange')} options={chartOptions} />
    </main>
  );
};

export default App;

const express = require('express');
const bodyParser = require('body-parser');
const apiRouter = require('./api');

const app = express();
const PORT = 3001;

app.use(bodyParser.json());
app.use('/api', apiRouter);

app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});


const express = require('express');
const fft = require('fft-js').fft;
const fftUtil = require('fft-js').util;
const butterworth = require('butterworth-filter');

const router = express.Router();

router.post('/fft', (req, res) => {
  try {
    const { data } = req.body;
    if (!Array.isArray(data) || data.length === 0) {
      return res.status(400).json({ error: 'Invalid data format' });
    }
    const phasors = fft(data);
    const mags = fftUtil.fftMag(phasors);
    res.json(mags.slice(0, Math.floor(mags.length / 2)));
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

router.post('/filter', (req, res) => {
  try {
    const { data } = req.body;
    if (!Array.isArray(data) || data.length === 0) {
      return res.status(400).json({ error: 'Invalid data format' });
    }
    const filtered = butterworth.lowpass(data, 2, 0.1);
    res.json(filtered);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;

CREATE TABLE IF NOT EXISTS steps (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  count INTEGER NOT NULL,
  timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO steps (count) VALUES (0);

const request = require('supertest');
const express = require('express');
const bodyParser = require('body-parser');
const apiRouter = require('./api');

const app = express();
app.use(bodyParser.json());
app.use('/api', apiRouter);

describe('API Tests', () => {
  test('POST /api/fft returns frequency magnitudes', async () => {
    const res = await request(app)
      .post('/api/fft')
      .send({ data: [1, 0, -1, 0, 1, 0, -1, 0] });
    expect(res.statusCode).toBe(200);
    expect(Array.isArray(res.body)).toBe(true);
    expect(res.body.length).toBeGreaterThan(0);
    res.body.forEach((x) => expect(typeof x).toBe('number'));
  });

  test('POST /api/fft returns 400 for invalid data', async () => {
    const res = await request(app).post('/api/fft').send({ data: 'invalid' });
    expect(res.statusCode).toBe(400);
  });

  test('POST /api/filter returns filtered data', async () => {
    const data = Array.from({ length: 50 }, (_, i) => Math.sin(i / 5));
    const res = await request(app).post('/api/filter').send({ data });
    expect(res.statusCode).toBe(200);
    expect(Array.isArray(res.body)).toBe(true);
    expect(res.body.length).toBe(data.length);
  });

  test('POST /api/filter returns 400 for invalid data', async () => {
    const res = await request(app).post('/api/filter').send({ data: null });
    expect(res.statusCode).toBe(400);
  });
});


